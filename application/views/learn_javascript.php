<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Ex login ด้วย ajax ใช้เมธอด serializeArray() ในการส่งข้อมูลแบบ json</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="http://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
</head>

<body>
        <!--
        โอเปอเรเตอร์วงเล็บในจาวาสคริปต์จะเหมือนภาษาโปรแกรมอื่นๆ ที่ใช้เครื่องหมายวงเล็บเป็นโอเปอเรเตอร์ เพื่อควบคุมลำดับการทำงานของโอเปอเรเตอร์ตามต้องการ ตัวอย่าง
        var a = 1 + (2 * 3) + 5;
        console.log(a);
        
        ในตัวอย่างนี้เครื่องหมายคูณ (*) จะมีความสำคัญสูงกว่าเครื่องหมาย (+) ด้วยเหตุนี้จึงคุณ 2 กับ 3
        ก่อน แล้วจึงนำผลลัพธ์ที่ได้ไปบวกกับเลข 1 และ 5 ทีหลัง
        จากตัวอย่างดังกล่าว สามารถใช้วงเล็บมาควบคุมลำดับการทำงานของโอเปอเรเตอร์ได้ ดังตัวอย่าง

        var a = (1 + 2) * (3 + 5)
        console.log(a); // 24 

        ตัวอย่างนี้ได้ดัดแปลงมาจากตัวอย่างก่อน ซึ้งจะจัดลำดับการทำงานของโอเปอเรเตอร์เสียใหม่ โดยใช้ วงเล็บมาครอบนิพจน์ 
        (1 + 2) กับ (3 + 5) เพื่อให้บวกตัวเลขในวงเล็บเสียก่อน แล้วจึงค่อยนำผลลัพธ์ที่ได้มาคูณกันทีหลัง

        สำหรับลำดับความสำคัญของโอเปอเรเตอร์ (Operator Precedence) โดยดีฟอลต์ของจาวาสคริปต์

        โอเปอเรเตอร์คอมม่า
        ในจาวาสคริปต์สามารถเขียนนิพจน์หลายอัน ให้อยู่ในประโยคคำสั่งเดียวกันได้ ด้วยการใช้โอเปอเรเตอร์คอมม่า (Comma Operators)
        ซึ้งก็คือการใช้เครื่องหมายจุลภาค (,) เป็นตัวคั่นแยกแต่บ่ะนิพจน์เอาไว้
        นิพจน์1, นิพจน์2, นิพจน์3, นิพจน์4;

        นิพจน์1, นิพจน์2, นิพจน์3 และ นิพจน์4 มันจะเรียงต่อเนื่องกัน โดยมีเครื่องหมายจุลภาคคั่นแยกเอาไว้
        เวลาประมวลผลการทำงาน ก็จะทำการเรียงจากนิพจน์ซ้ายมือสุดมายังขวามือสุด แต่ผลลัพธ์ที่รีเทอรน์ออกมาจะเป็นนิพจน์ฝั่งขวามือสุด (ในกรณีนี้คือ นิพจน์4) 
        สำหรับการเขียนนิพจน์หลายตัวแบบนี้ สามารถใช้แทนตำแหน่งที่แต่เดิมเป็นเพียงนิพจน์ตัวเดียวได้

        var a = 1, b = 2;
        var x = (1+34, a += 2, b *= 10, b+1);
        console.log(x); // 21
        ในตัวอย่างนี้นิพจน์ (1+34, a += 2, b *= 10, b+1) ภายในวงเล็บต้องเป็นนิพจน์ตัวเดียว แต่มันสามารถแทนที่หลายนิพจน์ได้ ด้วยการใช้โอเปอเรเตอร์คอมม่า ส่วนการทำงาน
        จะเริ่มจากนิพจน์ซ้ายมือสุดก่อนก็คือ 1+34 หลังจากนั้นก็จะทำนิพจน์ a += 2, b *= 10, และ b+1 ตามบำดับ แต่ทว่าผลลัพธ์ของนิพจน์ฝั่งขวามือสุด 
        (ในกรณีนี้คือ b+1) จะถูกนำมากำหนดให้กับตัวแปร x มีค่าเป็น 21
        Math.ceil(4.4); ปัดเศษขึ้น เป็น 5

        โอเปอเรเตอร์ void
        โอเปอเรเตอร์ void จะใช้ประมวลผลนิพจน์ที่วางไว้ด้านหลัง แต่ทว่าค่าที่โอเปอเรเตอร์รีเทิรน์ออกมานั้นจะเป็น undefined โดยจะมีรายละเอียดการใช้งานดังตัวอย่าง

        var a = void 12;
        console.log(a)


        อาร์เรย์
        อาร์เรย์ (Array) เป็นชนิดข้อมูลออบเจ็กต์แบบหนึ่ง ที่ใช้แทนโครงสร้างข้อมูลโดยที่ข้อมูลจะเรียงต่อเนื่องกันเป็นแถวเดียว (สมาชิกซ้ำกันได้) ส่วนขนาดของอาร์เรย์ในจาวาสคริปต์ ก็จะยืดหยุน
        เพราะสามารถขยายขนาดได้

        สำหรับวิธีการสร้างอาร์เรย์และใช้งานมัน ก็จะเหมือนภาษาอื่นๆ ที่เขามีใช้งานกัน ดังตัวอย่าง
        [1, 1, 1, true, "Array"] // อาร์เรย์

        ในตัวอย่างนี้จะสร้างอาร์เรย์ ซึ้งมีข้อมูลได้แก่ 1,1,1 true และ "Array" มาเรียงต่อเนื่องกัน และอยู่ภายในวงเล็บเหลียม โดยมีเครื่องหมาย
        จุลภาค (,) คั่นแยกสมาชิกแต่ล่ะตัวออกจากกัน แต่เนื่องจากจาวาสคริปต์มันเป็นไดนามิกไทป์ ไม่เข้มงวดเรื่องชนิดข้อมูล จึงทำให้สมาชิกในอาร์เรย์สามารถเป็นชนิดข้อมูลอะไรก็ได้ อีกทั้งสมาชิกยัง
        สมารถซ้ำกันได้ด้วย (ในตัวอย่างนี้จะมีเลข 1 ซ้ำกันในอาร์เรย์ถึง 3 ค่าด้วยกัน)

        สำหรับการเข้าถึงสมาชิกอาร์เรย์ ก็ให้ใช้วงเล็บเหลียม พร้อมทั้งระบุอินเด็กซ์ (index) ซึ้งเป็นตำแหน่งของสมาชิกในอาร์เรย์ (สมาชิกตัวแรกจะนับเป็น 0)

        var a = ["a", "b", "c", "d", "e"];
        console.log(typeof a);
        console.log(a[0], a[1], a[2], a[3], a[4]);

        ในตัวอย่างนี้ตัวแปร a คืออาร์เรย์ ที่สามารถเข้าถึงสมาชิกแต่ล่ะตัวด้วยประโยค a[อินเด็กซ์] ซึ้งอินเด็กซ์
        จะมีค่าเริ่มต้นตั้งแต่ 0 ถึง 4 เพราะมันมีสมาชิกทั้งหมด 5 ตัวด้วยกัน

        นอกจากนี้แล้วยังสมารถประกาศอาร์เรย์ว่าง ที่ยังไม่มีสมาชิกอะไรอยู่ข้างในเลย แล้วค่อยไปเพิ่มสมาชิกเอาทีหลัง ก็สามารถ
        ทำได้เช่นกัน เพราะว่าขนาดอาร์เรย์ในจาวาสคริปต์มันขยายได้ ดังตัวอย่าง

        var array = []; // ประกาศเป็น array ว่าง
        array[0] = 1;
        array[1] = 2;

        ในตัวอย่างจะสร้างอาร์เรย์ว่างขึ้นมาก่อน แล้วจึงค่อยเพิ่มสมาชิกเข้าไปทีหลัง (ถ้าเป็นบางภาษาขนาดของอาร์เรย์จะคงที่)
        ในอาร์เรย์ทุกตัวจะมีพร็อพเพอร์ตี้ที่ชื่อ length ซึ้งมีไว้บอกจำนวนสมาชิก ดังตัวอย่าง

        ในอาร์เรย์ทุกตัวจะมีพร็อพเพอร์ตี้ที่ชื่อ length ซึ้งมีไว้บอกจำนวนสมาชิก ดังดัวอย่าง
        var array = [1, 2, 3, 4, 5];
        console.log(array.length);

        ในตัวอย่างนี้อาร์เรย์จะมีค่า array.length เท่ากับ 5 นั้นหมายความว่า จะมีสมาชิกทั้งหมด 5 ตัว
        ขณะเดียวกัน length ก็สามารถแก้ไขค่าได้ หลังจากสร้างอาร์เรย์ขึ้นมาแล้ว ดังตัวอย่าง

        var array = [1, 2, 3, 4, 5];
        console.log(array.length); // เท่ากับ 5

        array.length = 7; // เพิ่มขนาดอาร์เรย์จาก 5 เป็น 7
        console.log(array); // [1, 2, 3, 4, 5, <2 empty slots>]
        console.log(array.length); // 7

        array[9] = 100;
        console.log(array); // [1, 2, 3, 4, 5, <4 empty slots>, 100]
        console.log(array.length); // 10

        ในตัวอย่างจะเห็นว่าเมื่อสร้างอาร์เรย์ขึ้นมาแล้ว ก็สามารถเพิ่มขนาดได้ด้วยการแก้ไขค่าในตัวแปร length
        จาก 5 ให้กลายเป็น 7 หรือจะเพิ่มสมาชิกใหม่เข้าไปด้วยประโยค array[9] = 100; ขนาดก็จะเพิ่มเป็น 10

        การประกาศฟังก์ชั่น
        ฟังก์ชั่น คือโปรแกรมย่อยหรืองานย่อยๆ (Sub-programe) ซึ้งมีจุดประสงค์เพื่อรวมคำสั่งของโปรแกรมที่ทำงานซ้ำ
        กันให้มารวมอยู่จุดเดียวกัน แล้วจึงเรียกใช้งานผ่านทางฟังก์ชั่นเดียว ซึ้งในจาวาสคริปต์ก็จะมีฟังก์ชั่น
        เตรียมเอาไว้ให้แล้วอยู่ในภาษา (เช่น console.log() ดังที่เห็นในหลายๆตัวอย่าง)

        แต่ถึงอย่างไรก็ตาม ก็สามารถประกาศฟังก์ชั่น (Function Declarations) ในจาวาสคริปต์ได้ด้วยตนเอง
        โดยจะมีรูปแบบดังต่อไปนี้

        function function_Name (พารามิเตอร์, พารามิเตอร์2, .....)
        {
          // ซอร์สโค้ดภายในบอดี้ของฟังก์ชั่น
          return [value]:
          // จะมีหรือไม่มีประโยค return ก็ได้
          // ส่วนค่า value หลังคำว่า return จะมีหรือไม่มีก็ได้
        } 

        การประกาศฟังก์ชั่นจะเริ่มต้นด้วยคีย์เวิร์ด function แล้วตามด้วยชื่อฟังก์ชั่น พร้อมต่อท้ายด้วยการ
        ประกาศตัวแปรที่ใช้เป็นพารามิเตอร์ (Parameters) ซึ้งจะเขียนอยู่ในวงเล็บ โดยมีเครื่องหมายจุลภาค
        (,) คั้นแยกตัวแปรแต่ล่ะตัวออกจากกัน
        ส่วนตัวบอดี้ (Body) ของฟังก์ชั่น จะต้องใช้เครื่องหมายปีกกาเปิดและปิดครอบ เพื่อรวมกลุ่มประโยคคำสั่งต่างๆ
        ของฟังก์ชั่นเอาไว้ สำหรับเครื่องหมายปีกกาครอบนี้จะเรียกว่า "บล็อก (Block)"

        ตัวอย่างต่อไปนี้จะเป็นการประกาศฟังก์ชั่น
        function calculate (param1, param2)
        {
          return param1 * param2;
        }

        ในตัวอย่างเป็นการประกาศฟังก์ชั่นชื่อ calculate ซึ้งมีตัวแปรที่เป็นพารามิเตอร์ 2 ตัวได้แก่ param1
        กับ param2 และในตัวบอดี้ของฟังก์ชั่น มันจะรีเทิร์นผลลัพธ์ที่ได้จากนิพจน์ param1 * param2 ออกมา
        ส่วนวิธีเรียกใช้งานฟังก์ชั่น ก็จะเหมือนกับภาษาโปรแกรมทั้วๆไป 

        var result = calculate (10, 2);
        console.log(result); // 20

        ในตัวอย่างนี้ประโยค calculate(10, 2); จะเป็นการเรียกใช้งานฟังก์ชั่นของจังอย่างก่อนหน้าโดยจะส่งเลข 10
        และ 2 ไปให้พารามิเตอร์ของฟงัก์ชั่น ได้แก่ param1 กับ param2 ตามลำดับ จากนั้นจะเข้ามาทำงานที่ตัว
        บอดี้ของฟังก์ชั่น ด้วยการประมวลผลนิพจน์ param1 * param2 จนได้ค่าเป็น 20 แล้วส่งผลลัพธ์ที่ได้ออกจาก
        ฟังก์ชั่น (รีเทร์น) ซึ้งค่าดังกล่าวจะถูกนำมากำหนดให้กับตัวแปร result ที่อยู่ฝั่งซ้ายมือของเครื่องหมายเท่ากับ (=)

        ค่าที่ส่งไปให้ะารามิเตอร์ตอนเรียกใช้งานฟังก์ชั่นจเรียกว่าเป็น "อาร์กิวเมนต์" (Arguments) และจากตัวอย่างดังกล่าว
        ค่าอาร์กิวเมนต์ก็คือ 10 กับ 2 ดังภาพ
        เป็นการเรยีกใช่งานฟังก์ชั่นด้วยประโยค var result = calculate(10, 2);

        สำรับฟังก์ชั่นถ้าไม่ต้องการประกาศพารามิเตอร์ ก็สามารถเขียนได้ ดังตัวอย่าง
        function calculate ()
        {
          return 20;
        }
        var result = calculate();
        console.log(result); // 20

        ในตัวอย่างจะเป็นการฟังก์ชั่นชื่อ calculate ที่ไม่ได้ประกาศพารามิเตอร์เอาไว้ และเมื่อเรียกใช้
        งานก็ไม่ต้องมีค่าอาร์กิวเมนต์อะไรส่งไปให้ ซึ้งผลการทำงานของฟงก์ชั่นนี้จะรีเทิรน์ 20 ออกมา

        ประโยค return
        ปกติแล้วประโยคคำสั่ง return ในฟังก์ชั่น นอกจากมีไว้เพื่อรีเทิร์นค่าแล้ว (ส่งผลลัพธ์ออกนอกฟังก์ชั่น)
        มันยังใช้จบการทำงานของฟังก์ชั่นที่ตำแหน่งใดก็ได้ ดังตัวอย่าง
        function myFunction () {
          return 1;
          console.log("myFunction"); // บรรทัดนี้เส้นทางการทำงานของโปรแกรมจะมาไม่ถึง
        }

        var result = myFunction ();
        console.log(result); // 1

        ในตัวอย่างนี้เมื่อเรียกฟังก์ชั่น myFunction(); จะรีเทิร์นเลข 1 ออกมาและจบการทำงานทันที โดยจะ
        ไม่ทำงานประโยคคำสั่งในบรรทัดที่เหลือหลังจากประโยค return อีกเด็ดขาด (ไม่ทำประโยคคำสั่ง console.log("myFunction");)

        แต่ถ้าคำว่า return ไม่ได้ระบุค่าอะไรไว้เลย ก็จะรีเทริ์นค่าเป็น undefined แทน ดังตัวอย่าง

        function myFunction () {
          return;
        }

        var result = myFunction();
        console.log(result); // undefined
        ในตัวอย่างเมื่อเรียก myFunction(); ให้ทำงาน มันจะรัชีเทริร์นผลลัพธ์ออกมาเป็น undefined เพราะหลัง
        ประโยคคำสั่ง return; ไม่ได้ระบุค่าอะไรไว้เลย

        แต่ถ้าตัวบอดี้ของฟังก์ชั่นไม่มีประโยคคำสั่ง return ปิดท้าย จาวาสคริปต์จะรีเทริร์นค่าออกมาเป็น undefined โดยอัตโนมัติดังตัวอย่าง

        function myFunction () 
        {
          console.log("myFunction");
          // จะเสมือนเป็น return undefined; วางไว้ตำแหน่งสุดท้าย ก่อนฟังก์ชั่นจบการทำงาน
        }
        var result = myFunction(); // "myFunction"
        console.log(result); // undefined

        ในตัวอย่างนี้แม้ว่าฟังก์ชั่น myFunction() จะไม่มีประโยค return ปิดท้ายก่อนขบการทำงาน แต่มันจะรีเทิร์นค่าออกมาเป็น
        undefined โดยอัตโนมัติ


        -->

    <script>

        // ฟังก์ชั่นไร้ชื่อ การประกาศฟังก์ชั่นไร้ชื่อ (Anonymous Functions) จะเป็นการประกาศฟังก์ชั่น โดยจะตัด
        // ชื่อฟังก์ชั่นทิ้งไป ให้เหลือเพียงแค่คีย์เวิร์ด function อย่างเดียว ดังตัวอย่าง
        // function (param1, param2){
        //   return param1 * param2;
        // }

        // ในตัวอย่างนี้จะเป็นการประกาศฟังก์ชั่นแบบไร้ชื่อ โดยไม่มีชื่ออะไรมาอ้างอิงฟังก์ชั่นเลย
        // สำหรับฟังก์ชั่นไร้ชื่อจะมีประโยชน์ เมื่อนำมันไปใช้เป็นค่าอาร์กิวเมนต์ หรือใช้ในประโยคคำสั่ง return
        // ซึ้งจะได้เห็นในหัวข้อถัดไป
        
        // นิพจน์ฟังก์ชั่น
        // ฟังก์ชั่นในจาวาสคริปต์จะถือว่าเป็นชนิดข้อมูลแบบออบเจ็กต์ ด้วยเหตุนี้จึงสามารถกำหนดฟังก์ชั่นให้แก่
        // ตัวแปรได้ด้วย ดังตัวอย่าง
        // var calculate = function (param1, param2){
        //   return param1 * param2;
        // }

        // console.log(calculate(10, 2)); // 20
        // calculate = 100; // ตัวแปร calculation สามารถแก้ไขให้เป็นค่าอื่นได้
        // console.log(calculate); // 100
        /*
        
        ในตัวอย่างเป็นการประกาศตัวแปร calculate ให้มีข้อมูลฟังก์ชั่นไร้ชื่อ และก็สามารถเรียกใช้งานฟังก์ชั่น
        ได้ตามปกติ ผ่านทางชื่อตัวแปร ซึ้งในตัวอย่างนี้จะเรียกเป็น calculate(10, 2)

        จากตัวอย่างดังกล่าวจะเห็นว่า ฟังก์ชั่นไร้ชื่อสามารถอยู่ฝั่งขวามือของเครื่องหมายเท่ากับ (=) ไม่ต่าง
        อะไรกับนิพจน์ตัวหนึ่ง ด้วยเหตุนี้จึงสามารถเรียกฟะงก์ชั่นที่อยู่ในตำแหน่งนี้ว่าเป็น "นิพจน์ฟังก์ชั่น"
        (Function Expressions)

        ลองพิจารณาตัวอย่างการใช้นิพจน์ฟังก์ชั่น ด้วยการประกาศให้มันมีชื่อ ดังต่อไปนี้
        */

        // var calculate = function calc2(param1, param2)
        // {
        //   return param1 * param2;
        // }

        // console.log(calculate(10,2)); // 20
        /* 
        ในตัวอย่างจะประกาศนิพจน์ฟังก์ชั่นให้มีชื่อว่า calc2 (จะไม่เหมือนตัวอย่างก่อนหน้าที่เป็นฟังก์ชั่นไร้ชื่อ)
        และ calc2 ก็จะถูกกำหนดค่าให้กับตัวแปร calculate และก็สามารถเรยีกใช้งานมันได้ไม่ต่างอะไรกับ
        ฟังก์ชั่นทั่วๆไป

        ฟังก์ชั่นคอลแบ็ค
        เนื่องจากฟังก์ชั่นเป็นชนิดข้อมูลตัวหนึ่ง (ออบเจ็กต์) จึงสามารถใช้มันเป็นค่าอาร์กิวเมนต์ แล้วส่งไปให้ฟังก์ชั่น
        ตัวอื่นเรียกใช้งานได้ ดังตัวอย่าง
        */

        // function sayHi()
        // {
        //   console.log("Hi");
        // }

        // function sayBye(){
        //   console.log("Bye");
        // }
        
        // function say(func){

        //   func(); //เรียกฟังก์ชั่นให้ทำงาน

        // }

        // say(sayHi); // "Hi"
        // say(sayBye); // "Bye"

        /* 
        ในตัวอย่างนี้ ฟังก์ชั่น say(func) ได้ประกาศพารามิเตอร์ ก็คือ ตัวแปร func ซึ้งค่าอาร์กิวเมนต์ที่มันรับ
        เข้ามาจะเป็นฟังก์ชั่น และก็สามารถเรียกใช้งานตัวแปร func เป็นฟังก์ชั่นได้

        สำหรับฟังก์ชั่นที่ถูกใช้เป็นค่าอาร์กิวเมนต์ จะถูกเรียกว่าเป็น "ฟังก์ชั่นคอลแบ็ค" (Callback Function)
        ถ้าแปรตรงตัวก็คือ "ฟังก์ชั่นที่ถูกเรียกใช้งานกลับภายหลัง" สำหรับตัวอย่างดังกล่าว ฟังก์ชั่นคอลแบ็คก็คือ
        sayHi() กับ sayBye() ซึ้งจะถูกเรยีกใช้งานกลับจากฟังก์ชั่น say() ภายหลังนั้นเอง

        รีเทิร์นออกมาเป็นฟังก์ชั่น
        เนื่องจากฟังก์ชั่นเป็นชนิดข้อมูล จึงสามารถใช้ในประโยค return ได้เช่นกัน ดังตัวอย่าง

        */
         
        // function say(func){
        //   console.log("Say...");
        //   function sayHi(){
        //     console.log("Hi");
        //   }

        //   return sayHi; // รีเทิร์นฟังก์ชั่น
        // }

        // var hi = say(); // "Say....."
        // hi(); //"Hi"
        /* 
        ในตัวอย่างนี้ฟังก์ชั่น say() จะรีเทิร์นฟังก์ชั่น sayHi() ออกมาให้กับตัวแปร hi และสามารถเรียกใช้ hi()
        เหมือนเรียกฟังก์ชั่นทั่วไปได้
        ลองพิจารณาตัวอย่างการรีเทิร์นฟังก์ชั่น ดังต่อไปนี้
        */

        function say(func)
        {
            console.log("say.....");
            return function(){ // รีเทริน์ฟังก์ชั่นไร้ชื่อ
              console.log("Hi"); 
            }
        } // สิ้นสุดการประกาศฟังก์ชั่น

        var hi = say(); // "Say....."
        hi(); // "Hi"
    </script>

</body>
</html>